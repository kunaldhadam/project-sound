{"ast":null,"code":"var _jsxFileName = \"D:\\\\React Course\\\\Sound Project\\\\src\\\\components\\\\SoundVisualizer.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SoundVisualizer = () => {\n  _s();\n  const canvasRef = useRef(null);\n  let audioContext, analyser, dataArray, canvasCtx, audioElement;\n  useEffect(() => {\n    audioContext = new (window.AudioContext || window.webkitAudioContext)();\n    analyser = audioContext.createAnalyser();\n    analyser.fftSize = 2048;\n    dataArray = new Uint8Array(analyser.frequencyBinCount);\n    audioElement = new Audio('src\\\\sample.wav'); // Replace 'path_to_your_audio_file.mp3' with the actual path to your audio file\n\n    const source = audioContext.createMediaElementSource(audioElement);\n\n    // const source = audioContext.createOscillator(); // You can replace this with your audio source\n    source.connect(analyser);\n    analyser.connect(audioContext.destination);\n    source.start();\n    canvasCtx = canvasRef.current.getContext('2d');\n\n    // Render loop\n    const draw = () => {\n      requestAnimationFrame(draw);\n      analyser.getByteTimeDomainData(dataArray); // Get waveform data\n\n      canvasCtx.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n      canvasCtx.beginPath();\n      const sliceWidth = canvasRef.current.width * 1.0 / dataArray.length;\n      let x = 0;\n      for (let i = 0; i < dataArray.length; i++) {\n        const v = dataArray[i] / 128.0;\n        const y = v * canvasRef.current.height / 2;\n        if (i === 0) {\n          canvasCtx.moveTo(x, y);\n        } else {\n          canvasCtx.lineTo(x, y);\n        }\n        x += sliceWidth;\n      }\n      canvasCtx.lineTo(canvasRef.current.width, canvasRef.current.height / 2);\n      canvasCtx.stroke();\n    };\n    draw();\n    return () => {\n      source.stop();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 10\n  }, this);\n};\n_s(SoundVisualizer, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = SoundVisualizer;\nexport default SoundVisualizer;\nvar _c;\n$RefreshReg$(_c, \"SoundVisualizer\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","SoundVisualizer","_s","canvasRef","audioContext","analyser","dataArray","canvasCtx","audioElement","window","AudioContext","webkitAudioContext","createAnalyser","fftSize","Uint8Array","frequencyBinCount","Audio","source","createMediaElementSource","connect","destination","start","current","getContext","draw","requestAnimationFrame","getByteTimeDomainData","clearRect","width","height","beginPath","sliceWidth","length","x","i","v","y","moveTo","lineTo","stroke","stop","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/React Course/Sound Project/src/components/SoundVisualizer.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\n\r\nconst SoundVisualizer = () => {\r\n  const canvasRef = useRef(null);\r\n  let audioContext, analyser, dataArray, canvasCtx, audioElement;\r\n\r\n  useEffect(() => {\r\n    audioContext = new (window.AudioContext || window.webkitAudioContext)();\r\n    analyser = audioContext.createAnalyser();\r\n    analyser.fftSize = 2048;\r\n    dataArray = new Uint8Array(analyser.frequencyBinCount);\r\n\r\n    audioElement = new Audio('src\\\\sample.wav'); // Replace 'path_to_your_audio_file.mp3' with the actual path to your audio file\r\n\r\n    const source = audioContext.createMediaElementSource(audioElement);\r\n\r\n    // const source = audioContext.createOscillator(); // You can replace this with your audio source\r\n    source.connect(analyser);\r\n    analyser.connect(audioContext.destination);\r\n    source.start();\r\n\r\n    canvasCtx = canvasRef.current.getContext('2d');\r\n\r\n    // Render loop\r\n    const draw = () => {\r\n      requestAnimationFrame(draw);\r\n      analyser.getByteTimeDomainData(dataArray); // Get waveform data\r\n\r\n      canvasCtx.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\r\n      canvasCtx.beginPath();\r\n      const sliceWidth = (canvasRef.current.width * 1.0) / dataArray.length;\r\n      let x = 0;\r\n\r\n      for (let i = 0; i < dataArray.length; i++) {\r\n        const v = dataArray[i] / 128.0;\r\n        const y = (v * canvasRef.current.height) / 2;\r\n        if (i === 0) {\r\n          canvasCtx.moveTo(x, y);\r\n        } else {\r\n          canvasCtx.lineTo(x, y);\r\n        }\r\n        x += sliceWidth;\r\n      }\r\n\r\n      canvasCtx.lineTo(canvasRef.current.width, canvasRef.current.height / 2);\r\n      canvasCtx.stroke();\r\n    };\r\n\r\n    draw();\r\n\r\n    return () => {\r\n      source.stop();\r\n    };\r\n  }, []);\r\n\r\n  return <canvas ref={canvasRef} />;\r\n};\r\n\r\nexport default SoundVisualizer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}