{"ast":null,"code":"var _jsxFileName = \"D:\\\\React Course\\\\Sound Project\\\\src\\\\components\\\\SoundVisualizer.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SoundVisualizer = () => {\n  _s();\n  const canvasRef = useRef(null);\n  const [audioElement, setAudioElement] = useState(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  let audioContext, analyser, dataArray, canvasCtx;\n  useEffect(() => {\n    audioContext = new (window.AudioContext || window.webkitAudioContext)();\n    analyser = audioContext.createAnalyser();\n    analyser.fftSize = 2048;\n    dataArray = new Uint8Array(analyser.frequencyBinCount);\n    if (!audioElement) {\n      const audio = new Audio('src\\\\sample.wav'); // Replace with actual path\n      audio.crossOrigin = \"anonymous\"; // Necessary for certain servers\n      setAudioElement(audio);\n    }\n    canvasCtx = canvasRef.current.getContext('2d');\n\n    // Render loop\n    const draw = () => {\n      requestAnimationFrame(draw);\n      analyser.getByteTimeDomainData(dataArray); // Get waveform data\n\n      canvasCtx.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n      canvasCtx.beginPath();\n      const sliceWidth = canvasRef.current.width * 1.0 / dataArray.length;\n      let x = 0;\n      for (let i = 0; i < dataArray.length; i++) {\n        const v = dataArray[i] / 128.0;\n        const y = v * canvasRef.current.height / 2;\n        if (i === 0) {\n          canvasCtx.moveTo(x, y);\n        } else {\n          canvasCtx.lineTo(x, y);\n        }\n        x += sliceWidth;\n      }\n      canvasCtx.lineTo(canvasRef.current.width, canvasRef.current.height / 2);\n      canvasCtx.stroke();\n    };\n\n    // Play audio on user interaction\n    const playAudio = () => {\n      if (audioElement && !isPlaying) {\n        audioElement.play();\n        setIsPlaying(true);\n      }\n    };\n\n    // Listen for user interaction event (e.g., click) to start playing audio\n    document.addEventListener('click', playAudio);\n\n    // Start rendering\n    draw();\n\n    // Cleanup function\n    return () => {\n      document.removeEventListener('click', playAudio);\n    };\n  }, [audioElement, isPlaying]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 10\n  }, this);\n};\n_s(SoundVisualizer, \"PzoZS84H2NrCbcfWRhIUGUxBDK8=\");\n_c = SoundVisualizer;\nexport default SoundVisualizer;\nvar _c;\n$RefreshReg$(_c, \"SoundVisualizer\");","map":{"version":3,"names":["React","useEffect","useRef","useState","jsxDEV","_jsxDEV","SoundVisualizer","_s","canvasRef","audioElement","setAudioElement","isPlaying","setIsPlaying","audioContext","analyser","dataArray","canvasCtx","window","AudioContext","webkitAudioContext","createAnalyser","fftSize","Uint8Array","frequencyBinCount","audio","Audio","crossOrigin","current","getContext","draw","requestAnimationFrame","getByteTimeDomainData","clearRect","width","height","beginPath","sliceWidth","length","x","i","v","y","moveTo","lineTo","stroke","playAudio","play","document","addEventListener","removeEventListener","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/React Course/Sound Project/src/components/SoundVisualizer.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\n\r\nconst SoundVisualizer = () => {\r\n  const canvasRef = useRef(null);\r\n  const [audioElement, setAudioElement] = useState(null);\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n  let audioContext, analyser, dataArray, canvasCtx;\r\n\r\n  useEffect(() => {\r\n    audioContext = new (window.AudioContext || window.webkitAudioContext)();\r\n    analyser = audioContext.createAnalyser();\r\n    analyser.fftSize = 2048;\r\n    dataArray = new Uint8Array(analyser.frequencyBinCount);\r\n\r\n    if (!audioElement) {\r\n      const audio = new Audio('src\\\\sample.wav'); // Replace with actual path\r\n      audio.crossOrigin = \"anonymous\"; // Necessary for certain servers\r\n      setAudioElement(audio);\r\n    }\r\n\r\n    canvasCtx = canvasRef.current.getContext('2d');\r\n\r\n    // Render loop\r\n    const draw = () => {\r\n      requestAnimationFrame(draw);\r\n      analyser.getByteTimeDomainData(dataArray); // Get waveform data\r\n\r\n      canvasCtx.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\r\n      canvasCtx.beginPath();\r\n      const sliceWidth = (canvasRef.current.width * 1.0) / dataArray.length;\r\n      let x = 0;\r\n\r\n      for (let i = 0; i < dataArray.length; i++) {\r\n        const v = dataArray[i] / 128.0;\r\n        const y = (v * canvasRef.current.height) / 2;\r\n        if (i === 0) {\r\n          canvasCtx.moveTo(x, y);\r\n        } else {\r\n          canvasCtx.lineTo(x, y);\r\n        }\r\n        x += sliceWidth;\r\n      }\r\n\r\n      canvasCtx.lineTo(canvasRef.current.width, canvasRef.current.height / 2);\r\n      canvasCtx.stroke();\r\n    };\r\n\r\n    // Play audio on user interaction\r\n    const playAudio = () => {\r\n      if (audioElement && !isPlaying) {\r\n        audioElement.play();\r\n        setIsPlaying(true);\r\n      }\r\n    };\r\n\r\n    // Listen for user interaction event (e.g., click) to start playing audio\r\n    document.addEventListener('click', playAudio);\r\n\r\n    // Start rendering\r\n    draw();\r\n\r\n    // Cleanup function\r\n    return () => {\r\n      document.removeEventListener('click', playAudio);\r\n    };\r\n  }, [audioElement, isPlaying]);\r\n\r\n  return <canvas ref={canvasRef} />;\r\n};\r\n\r\nexport default SoundVisualizer;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3D,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAMC,SAAS,GAAGN,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAM,CAACO,YAAY,EAAEC,eAAe,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACQ,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EACjD,IAAIU,YAAY,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,SAAS;EAEhDf,SAAS,CAAC,MAAM;IACdY,YAAY,GAAG,KAAKI,MAAM,CAACC,YAAY,IAAID,MAAM,CAACE,kBAAkB,EAAE,CAAC;IACvEL,QAAQ,GAAGD,YAAY,CAACO,cAAc,CAAC,CAAC;IACxCN,QAAQ,CAACO,OAAO,GAAG,IAAI;IACvBN,SAAS,GAAG,IAAIO,UAAU,CAACR,QAAQ,CAACS,iBAAiB,CAAC;IAEtD,IAAI,CAACd,YAAY,EAAE;MACjB,MAAMe,KAAK,GAAG,IAAIC,KAAK,CAAC,iBAAiB,CAAC,CAAC,CAAC;MAC5CD,KAAK,CAACE,WAAW,GAAG,WAAW,CAAC,CAAC;MACjChB,eAAe,CAACc,KAAK,CAAC;IACxB;IAEAR,SAAS,GAAGR,SAAS,CAACmB,OAAO,CAACC,UAAU,CAAC,IAAI,CAAC;;IAE9C;IACA,MAAMC,IAAI,GAAGA,CAAA,KAAM;MACjBC,qBAAqB,CAACD,IAAI,CAAC;MAC3Bf,QAAQ,CAACiB,qBAAqB,CAAChB,SAAS,CAAC,CAAC,CAAC;;MAE3CC,SAAS,CAACgB,SAAS,CAAC,CAAC,EAAE,CAAC,EAAExB,SAAS,CAACmB,OAAO,CAACM,KAAK,EAAEzB,SAAS,CAACmB,OAAO,CAACO,MAAM,CAAC;MAC5ElB,SAAS,CAACmB,SAAS,CAAC,CAAC;MACrB,MAAMC,UAAU,GAAI5B,SAAS,CAACmB,OAAO,CAACM,KAAK,GAAG,GAAG,GAAIlB,SAAS,CAACsB,MAAM;MACrE,IAAIC,CAAC,GAAG,CAAC;MAET,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGxB,SAAS,CAACsB,MAAM,EAAEE,CAAC,EAAE,EAAE;QACzC,MAAMC,CAAC,GAAGzB,SAAS,CAACwB,CAAC,CAAC,GAAG,KAAK;QAC9B,MAAME,CAAC,GAAID,CAAC,GAAGhC,SAAS,CAACmB,OAAO,CAACO,MAAM,GAAI,CAAC;QAC5C,IAAIK,CAAC,KAAK,CAAC,EAAE;UACXvB,SAAS,CAAC0B,MAAM,CAACJ,CAAC,EAAEG,CAAC,CAAC;QACxB,CAAC,MAAM;UACLzB,SAAS,CAAC2B,MAAM,CAACL,CAAC,EAAEG,CAAC,CAAC;QACxB;QACAH,CAAC,IAAIF,UAAU;MACjB;MAEApB,SAAS,CAAC2B,MAAM,CAACnC,SAAS,CAACmB,OAAO,CAACM,KAAK,EAAEzB,SAAS,CAACmB,OAAO,CAACO,MAAM,GAAG,CAAC,CAAC;MACvElB,SAAS,CAAC4B,MAAM,CAAC,CAAC;IACpB,CAAC;;IAED;IACA,MAAMC,SAAS,GAAGA,CAAA,KAAM;MACtB,IAAIpC,YAAY,IAAI,CAACE,SAAS,EAAE;QAC9BF,YAAY,CAACqC,IAAI,CAAC,CAAC;QACnBlC,YAAY,CAAC,IAAI,CAAC;MACpB;IACF,CAAC;;IAED;IACAmC,QAAQ,CAACC,gBAAgB,CAAC,OAAO,EAAEH,SAAS,CAAC;;IAE7C;IACAhB,IAAI,CAAC,CAAC;;IAEN;IACA,OAAO,MAAM;MACXkB,QAAQ,CAACE,mBAAmB,CAAC,OAAO,EAAEJ,SAAS,CAAC;IAClD,CAAC;EACH,CAAC,EAAE,CAACpC,YAAY,EAAEE,SAAS,CAAC,CAAC;EAE7B,oBAAON,OAAA;IAAQ6C,GAAG,EAAE1C;EAAU;IAAA2C,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACnC,CAAC;AAAC/C,EAAA,CAlEID,eAAe;AAAAiD,EAAA,GAAfjD,eAAe;AAoErB,eAAeA,eAAe;AAAC,IAAAiD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}